// A small demo of how to draw arbitrary images to a custom canvas,
// by using ui.create_dynamic_texture and c.draw_texture .
// The gradient is generated by calculating the color of each pixel in the canvas,
// then blitting the resulting image/texture to the canvas at once at the end.
import ui
import gx
import sokol.gfx

@[heap]
struct App {
mut:
	window  &ui.Window = unsafe { nil }
	buf     &u8        = unsafe { nil }
	texture gfx.Image
	sampler gfx.Sampler
}

fn main() {
	mut app := App{}
	app.window = ui.window(
		width: 600
		height: 400
		title: 'gradient'
		on_init: app.init_texture
		children: [
			ui.canvas_plus(
				id: 'canvas_gradient'
				on_draw: app.draw_gradient
			),
		]
	)
	ui.run(app.window)
}

fn (mut app App) init_texture(w &ui.Window) {
	app.texture = ui.create_dynamic_texture(256, 256)
	app.sampler = ui.create_image_sampler()
	app.buf = unsafe { malloc(256 * 256 * 4) }
}

fn (app &App) draw_gradient(mut d ui.DrawDevice, c &ui.CanvasLayout) {
	target_hue, _, _ := ui.rgb_to_hsv(gx.rgb(255, 0, 0))
	mut i := 0
	for y in 0 .. 256 {
		for x in 0 .. 256 {
			saturation := f32(y) / 255.0
			value := f32(255 - x) / 255.0
			rgb_color := ui.hsv_to_rgb(target_hue, saturation, value)
			unsafe {
				app.buf[i] = rgb_color.r
				app.buf[i + 1] = rgb_color.g
				app.buf[i + 2] = rgb_color.b
				app.buf[i + 3] = 255
				i += 4
			}
		}
	}
	ui.update_text_texture(app.texture, 256, 256, app.buf)
	c.draw_texture(app.texture, app.sampler)
}
